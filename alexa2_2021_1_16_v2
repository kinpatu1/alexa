const Alexa = require('ask-sdk-core');
const persistenceAdapter = require('ask-sdk-s3-persistence-adapter');
const LaunchRequestHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'LaunchRequest';
    },
    async handle(handlerInput) {

        // 登録日
        var today = new Date(); 
        today = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0); 
        let today1 = today.toString();

        let format = {
            "登録日":{
                "register":`${today1}`
            },
            "達成数":{
                "achievement":"0"
            },
            "ノルマ":{
                "task":`0`
            },
            "ノルマ設定":{
                "task":`0`
            }
        };
        
        // アトリビュートを読み込むハンドラー
        const attributesManager = handlerInput.attributesManager;
        let s3Attributes = await attributesManager.getPersistentAttributes() ;

        // フォーマット作成
        if(s3Attributes["ノルマ設定"] ){
            let test = 111111111111;
            console.log(test);
            
            const speakOutput = "時間報告か目標管理どちらを開きますか？";
    
            return handlerInput.responseBuilder
                .speak(speakOutput)
                .reprompt(speakOutput)
                .getResponse();
            
            
            
            }if(s3Attributes["登録日"] ){
            let renew1 = s3Attributes["登録日"]["register"];
            let renew2 = s3Attributes["達成数"]["achievement"];
            let renew3 = s3Attributes["ノルマ"]["task"];

            s3Attributes = format;

            s3Attributes["登録日"]["register"] =renew1;
            s3Attributes["達成数"]["achievement"] =renew2;
            s3Attributes["ノルマ"]["task"] =renew3;
            
            attributesManager.setPersistentAttributes(s3Attributes);
            await attributesManager.savePersistentAttributes();


            const speakOutput = "時間報告か目標管理どちらを開きますか？";
    
            let test2 = 2222222222;
            console.log(test2);
    
    
            return handlerInput.responseBuilder
                .speak(speakOutput)
                .reprompt(speakOutput)
                .getResponse();
            
        }else{
            s3Attributes = format;
            
            
                // いつぶりのログインか計算
            /* 今回ログイン日 */
            today = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0); 
            /* 登録日 */
            var dateStart1 = new Date(s3Attributes["登録日"]["register"]);
            /* いつ振りか表示 */
            var msecDiff1 = today.getTime() - dateStart1.getTime();
            var dayDiff1 = Math.floor(msecDiff1 / 1000 / 60 / 60 / 24);
    
            let newcomer6 = s3Attributes["ノルマ設定"]["task"];
    
    
            let dayDiff2 = (parseInt(dayDiff1,10) * parseInt(newcomer6,10));
            // アトリビュートを保存するハンドラー
            s3Attributes["ノルマ"]["task"] = dayDiff2;
            attributesManager.setPersistentAttributes(s3Attributes);
            await attributesManager.savePersistentAttributes();
            
            
            const speakOutput = "時間報告か目標管理どちらを開きますか？";
    
            let test3 = 333333333333;
            console.log(test3);
    
            return handlerInput.responseBuilder
                .speak(speakOutput)
                .reprompt(speakOutput)
                .getResponse();
            
        }
    }
};
const launchIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'launchIntent';
    },
    handle(handlerInput) {
        const speakOutput = "勉強時間報告か目標管理どちらを開きますか？";

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};
const studyIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'studyIntent';
    },
    handle(handlerInput) {
        const speakOutput = "何時間勉強しましたか？";

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};
const study_resultIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'study_resultIntent';
    },
    async handle(handlerInput) {
        
        
        // 変数の設定
        const slots = handlerInput.requestEnvelope.request.intent.slots;
        let num = slots.num.value;
        
        const attributes = handlerInput.attributesManager.getSessionAttributes();
        let newcomer4 = attributes.newcomer3;
        let newcomer5 = (parseInt(newcomer4,10));


        if(newcomer5 < 1){


            // アトリビュートを読み込むハンドラー
            const attributesManager = handlerInput.attributesManager;
            let s3Attributes = await attributesManager.getPersistentAttributes();

            // 登録日
            var today = new Date(); 

            // いつぶりのログインか計算
            /* 今回ログイン日 */
            today = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0); 
            /* 登録日 */
            var dateStart = new Date(s3Attributes["登録日"]["register"]);
            /* いつ振りか表示 */
            var msecDiff = today.getTime() - dateStart.getTime();
            var dayDiff = Math.floor(msecDiff / 1000 / 60 / 60 / 24);
            let dayDiff2 = (parseInt(dayDiff,10) * 3);
            
            let num3 = (parseInt(num,10));
            
    
            // アトリビュートを保存するハンドラー
            
            s3Attributes["ノルマ設定"]["task"] = num3;
            s3Attributes["ノルマ"]["task"] = dayDiff2;
            attributesManager.setPersistentAttributes(s3Attributes);
            await attributesManager.savePersistentAttributes();
            
            
            const speakOutput = `毎日${num}時間頑張りましょう`;
    
            return handlerInput.responseBuilder
                .speak(speakOutput)
                .reprompt(speakOutput)
                .getResponse();
        }
        // アトリビュートを読み込むハンドラー
        const attributesManager = handlerInput.attributesManager;
        let s3Attributes = await attributesManager.getPersistentAttributes();
        let num2 = s3Attributes["達成数"]["achievement"];
        
        // アトリビュートを保存するハンドラー
        s3Attributes["達成数"]["achievement"] = (parseInt(num,10)+parseInt(num2,10));
        attributesManager.setPersistentAttributes(s3Attributes);
        await attributesManager.savePersistentAttributes();
        
        
        const speakOutput = "お疲れ様でした。";

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
        
    }
};
const goalIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'goalIntent';
    },
    async handle(handlerInput) {
        
        // アトリビュートを読み込むハンドラー
        const attributesManager = handlerInput.attributesManager;
        let s3Attributes = await attributesManager.getPersistentAttributes();
        
        const attributes = handlerInput.attributesManager.getSessionAttributes();

        // ノルマ計算
        let achievement2 = s3Attributes["達成数"]["achievement"];
        let task2 = s3Attributes["ノルマ"]["task"];
        let penalty = (parseInt(task2,10)-parseInt(achievement2,10));
        
        // ノルマ設定
        /* 前回ログイン日 */
        let newcomer1 = s3Attributes["ノルマ設定"]["task"];
        let newcomer2 = (parseInt(newcomer1,10));
        
        if(newcomer2<1){
            const speakOutput = "ノルマ回数を設定することができます。いち日何時間勉強するか言ってください。";
            attributes.newcomer3 = newcomer2;
            handlerInput.attributesManager.setSessionAttributes(attributes);
            await attributesManager.savePersistentAttributes();
            return handlerInput.responseBuilder
                    .speak(speakOutput)
                    .reprompt(speakOutput)
                    .getResponse();
        }if(penalty>0){
            const speakOutput = `ノルマは${penalty}時間あります。`;
            return handlerInput.responseBuilder
                .speak(speakOutput)
                .reprompt(speakOutput)
                .getResponse();
        }
                const speakOutput = "ノルマはないです";
                return handlerInput.responseBuilder
                    .speak(speakOutput)
                    .reprompt(speakOutput)
                    .getResponse();
    }
};
const InitializationIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'InitializationIntent';
    },
    async handle(handlerInput) {

        // アトリビュートを読み込むハンドラー
        const attributesManager = handlerInput.attributesManager;
        let s3Attributes = await attributesManager.getPersistentAttributes();
        
        let init1 = s3Attributes["達成数"]["achievement"];
        let init2 = (parseInt(init1,10)/0);
        s3Attributes["達成数"]["achievement"] = init2;
        
        let init3 = s3Attributes["ノルマ"]["task"];
        let init4 = (parseInt(init3,10)/0);
        s3Attributes["ノルマ"]["task"] = init4;

        // アトリビュートを保存するハンドラー
        attributesManager.setPersistentAttributes(s3Attributes);
        await attributesManager.savePersistentAttributes();


        const speakOutput = "初期化しました";
        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};
const HelpIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'AMAZON.HelpIntent';
    },
    handle(handlerInput) {
        const speakOutput = ('勉強時間管理と言ってください');
        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};
const CancelAndStopIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && (Alexa.getIntentName(handlerInput.requestEnvelope) === 'AMAZON.CancelIntent'
                || Alexa.getIntentName(handlerInput.requestEnvelope) === 'AMAZON.StopIntent');
    },
    handle(handlerInput) {
        const speakOutput = ('またね');

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .getResponse();
    }
};
const FallbackIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'AMAZON.FallbackIntent';
    },
    handle(handlerInput) {
        const speakOutput = ('FALLBACK_MSG');

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};
const SessionEndedRequestHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'SessionEndedRequest';
    },
    handle(handlerInput) {
        console.log(`~~~~ Session ended: ${JSON.stringify(handlerInput.requestEnvelope)}`);
        // Any cleanup logic goes here.
        return handlerInput.responseBuilder.getResponse(); // notice we send an empty response
    }
};
const IntentReflectorHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest';
    },
    handle(handlerInput) {
        const intentName = Alexa.getIntentName(handlerInput.requestEnvelope);
        const speakOutput = ('REFLECTOR_MSG', {intentName: intentName});

        return handlerInput.responseBuilder
            .speak(speakOutput)
            //.reprompt('add a reprompt if you want to keep the session open for the user to respond')
            .getResponse();
    }
};
const ErrorHandler = {
    canHandle() {
        return true;
    },
    handle(handlerInput, error) {
        const speakOutput = ('ERROR_MSG');
        console.log(`~~~~ Error handled: ${JSON.stringify(error)}`);

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};
exports.handler = Alexa.SkillBuilders.custom()
    .addRequestHandlers(
        LaunchRequestHandler,
        launchIntentHandler,
        studyIntentHandler,
        study_resultIntentHandler,
        goalIntentHandler,
        InitializationIntentHandler,
        HelpIntentHandler,
        CancelAndStopIntentHandler,
        FallbackIntentHandler,
        SessionEndedRequestHandler,
        IntentReflectorHandler,
    )
    .addErrorHandlers(
        ErrorHandler,
    )
     .withPersistenceAdapter(
         new persistenceAdapter.S3PersistenceAdapter({bucketName:"alexa-study"})
     )
    .lambda();
